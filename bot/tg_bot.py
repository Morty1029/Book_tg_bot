import asyncio
import logging
import requests

from bot.config import Config
from BookStates import BookStates

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext



CONFIG = Config()
DISPATCHER = Dispatcher()
BOT = Bot(token=CONFIG.tg_token)
logging.basicConfig(level=logging.INFO)

books = {
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å": 1,
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –¢–∞–π–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞": 2,
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –£–∑–Ω–∏–∫ –ê–∑–∫–∞–±–∞–Ω–∞": 3,
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –ö—É–±–æ–∫ –æ–≥–Ω—è": 4,
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –û—Ä–¥–µ–Ω –§–µ–Ω–∏–∫—Å–∞": 5,
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –ü—Ä–∏–Ω—Ü –ü–æ–ª—É–∫—Ä–æ–≤–∫–∞": 6,
    "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –î–∞—Ä—ã —Å–º–µ—Ä—Ç–∏": 7,
}

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–∏–≥–µ")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–Ω–∏–≥
books_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å")],
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –¢–∞–π–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞")],
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –£–∑–Ω–∏–∫ –ê–∑–∫–∞–±–∞–Ω–∞")],
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –ö—É–±–æ–∫ –æ–≥–Ω—è")],
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –û—Ä–¥–µ–Ω –§–µ–Ω–∏–∫—Å–∞")],
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –ü—Ä–∏–Ω—Ü –ü–æ–ª—É–∫—Ä–æ–≤–∫–∞")],
        [KeyboardButton(text="–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ –î–∞—Ä—ã —Å–º–µ—Ä—Ç–∏")],
    ],
    resize_keyboard=True
)


@DISPATCHER.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–∏–≥, –æ –∫–æ—Ç–æ—Ä—ã—Ö —è –∑–Ω–∞—é",
        reply_markup=menu_keyboard
    )

"""
@DISPATCHER.message()
async def echo(message: types.Message):
    await message.answer(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}')
"""

@DISPATCHER.message(F.text == "üìñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–∏–≥–µ")
async def ask_series(message: types.Message,  state: FSMContext):
    await message.answer(
        text="–ü–æ –∫–∞–∫–æ–π –∏–∑ –∫–Ω–∏–≥ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?",
        reply_markup=books_keyboard
    )
    await state.set_state(BookStates.series)
    await state.update_data(series='GP')


@DISPATCHER.message(F.text, BookStates.series)
async def ask_book(message: types.Message, state: FSMContext):
    await state.set_state(BookStates.book_name)
    await state.update_data(book_name=message.text)
    await message.answer(
        text=f"–Ø –±—É–¥—É —Ä–∞–¥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–∏–≥–µ {message.text}"
    )

@DISPATCHER.message(F.text, BookStates.book_name)
async def answer_book_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    book_num = books[data.get('book_name')]
    answer = await get_answer(message.text, book_num=book_num)
    await message.answer(
        text=f"{answer}"
    )



async def get_answer(prompt, book_num=None):
    response = requests.get(f'{CONFIG.host}:{CONFIG.port}/get_answer', params={'prompt': prompt, 'book_num': book_num})
    return response.json()['answer']

async def main():
    await DISPATCHER.start_polling(BOT)




if __name__ == "__main__":
    asyncio.run(main())
